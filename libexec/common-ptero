# vim: ft=sh
set -e

if [ -n "$PTERO_DEBUG" ]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

log() {
    echo $@ 1>&2
}

display_subcommands() {
    local name=$(basename $0)
    local display_name=$(echo $name | sed 's/-/ /g')

    log "Usage: $display_name <SUBCOMMAND> [OPTIONS]"
    log
    log "Available subcommands:"
    local paths=$(echo $PATH | sed 's/:/ /g')
    for SC in $(find $paths -maxdepth 1 -name "$name-*" -not -name "$name-*-*"\
            | xargs -n 1 basename | sed s/^${name}-//); do
        log "  $SC"
    done
}

execute_subcommand() {
    local command=$1
    local name=$(basename $0)
    local display_name=$(echo $name | sed 's/-/ /g')

    command_path="$(command -v "$name-$command" || true)"
    if [ -z "$command_path" ]; then
        log "$display_name: no such command \`$command'"
        exit 1
    fi

    shift 1
    exec "$command_path" "$@"
}

delegate_to_subcommand() {
    local command="$1"
    case "$command" in
    '' )
        display_subcommands
        exit 1
      ;;
    * )
        execute_subcommand $@
      ;;
    esac
}

python_realpath() {
    python -c 'import os; import sys; print os.path.realpath(sys.argv[1])' $1
}

verify_jq() {
    if [ -z $(which jq) ]; then
        log "jq must be available in PATH"
        exit 1
    fi
    VERSION_ERROR=$(jq --version 2>&1 >/dev/null | perl -lne 'if ($_ =~ m/(\d+\.\d+).*$/) { if ($1 < 1.4) {print "jq version must be >= 1.4"}} else { print qq(Cannot parse version from `jq --version` output "$_".); }')
    if test -n "$VERSION_ERROR"; then
        log "$VERSION_ERROR"
        exit 1
    fi
}
